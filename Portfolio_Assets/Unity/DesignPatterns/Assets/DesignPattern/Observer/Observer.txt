Matthew Dodson

What is an Observer Design Pattern?
The Observer Design Pattern (also referred to as Publish-Subscribe Pattern) defines a one-to-many 
dependency between objects where-in changes to the 'one' object's state is broadcasted to the 'many' 
dependent objects.  

The object that changes state (the 'one' object) is referred to as the "subject" or "publisher". The objects 
that recieve the state change information (the 'many') are referred to as the "observers" or "subscribers".

An video game based example would be having a player die to multiple different AI enemies (in an MMO);
as the player's state changes from alive to dead, the enemies are informed of this and react by returning
to their orginal spawn areas and reseting their stats.

------

List when to use this design pattern.
This design pattern is one option for filling the "view" portion of the Model-View-Controller design
methodology. An advantage of this design pattern is that it allows for loose coupling, meaning that
an entity can inform other entities of changes in its state, without knowing who it is informing.

------

List why we don't want to use this design pattern.
The observer design pattern can introduce performance issues and complexity if it is not implemented 
correctly.


Sources:
https://sourcemaking.com/design_patterns/observer
https://www.sitepoint.com/understanding-the-observer-pattern/
http://gameprogrammingpatterns.com/observer.html